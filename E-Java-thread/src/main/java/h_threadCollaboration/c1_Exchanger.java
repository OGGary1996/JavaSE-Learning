package h_threadCollaboration;

/* 本例子使用Exchanger来实现两个线程之间的数据交换
 * 两个线程分别有一个字符串。
 * 通过 Exchanger 交换字符串，实现数据共享。
 * 并且通过设置计时器，来保证两个线程在规定时间内完成数据交换。
 */

import java.util.concurrent.*;

public class c1_Exchanger {
    public static void main(String[] args) {
        // create an Exchanger
        Exchanger<String> dataExchanger = new Exchanger<>();

        // create 2 threads to exchange data using the FixedThreadPool
        ExecutorService executor = Executors.newFixedThreadPool(2);
        executor.submit(() -> {
            try{
                String data1 = "Data generated by Thread1";
                System.out.println(Thread.currentThread().getName() + "has data: " + data1);
                String data2 = dataExchanger.exchange(data1,2, TimeUnit.SECONDS);
                System.out.println(Thread.currentThread().getName() + " received data: " + data2);
            }catch (InterruptedException | TimeoutException e){
                e.printStackTrace();
            }
        });

        executor.submit(() -> {
            try{
                Thread.sleep(3000); // 模拟延迟3秒，手动抛出线程1的超时异常
                String data1 = "Data generated by Thread2";
                System.out.println(Thread.currentThread().getName() + "has data: " + data1);
                String data2 = dataExchanger.exchange(data1,2 ,TimeUnit.SECONDS);
                System.out.println(Thread.currentThread().getName() + " received data: " + data2);
            }catch (InterruptedException | TimeoutException e){
                throw new RuntimeException(e);
            }
        });

        // shut down the executor
        executor.shutdown();
        try{
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)){
                executor.shutdownNow();
            }
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
